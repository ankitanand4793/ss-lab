LEX

1.l

%{
#include<stdio.h>
int chars=0,words=0,spaces=0,lines=0,sc=0;
%}
%%
"\n"	{lines++; words++;}
" "	{words++; spaces++;}
[a-zA-z0-9]	{chars++;}
.	;
%%

int yywrap(){return 1;}
void main()
{
	yyin=fopen("input.txt","r");
	yylex();
	printf("Characters: %d\n",chars);
	printf("Words: %d\n",words);
	printf("Spaces: %d\n",spaces);
	printf("Lines: %d\n",lines);
}



2.l

%{
#include<stdio.h>
int id=0, com=0, oper=0;
%}
%%
\/\/.* {com++;}
"/*"[^"*/"]*"*/" {com++;}
[\+\-\*\/] oper++;
= ;
[ \t\n] ;
[0-9]+[a-zA-Z0-9_]* ;
[a-zA-Z_][a-zA-Z0-9_]* {id++; ECHO; printf("\n");}
[!@#$^&()}{|;.<>?:"'~`\[\]]+[a-zA-Z0-9_]* ; 
. ;
%%
int yywrap(){return 1;
fclose(yyin);}
void main()
{
  yyin=fopen("input.txt","r");
  yylex();
  printf("No. of identifiers=%d\n", id);
  printf("No. of comments=%d\n", com);
  printf("No. of operators=%d\n", oper);
  }



3.l

%{
#include<stdio.h>
#include<string.h>
int top=-1,v=1,i=0,j=0;
char a[20],opt[20][10],opnd[20][10];
%}
%%
"("	{a[++top]='(';}
"{"	{a[++top]='{';}
"["	{a[++top]='[';}
")"	{
		if(a[top]=='(')
			top--;
		else
		{
			v=0;
			return;
		}
	}
"}"	{
		if(a[top]=='{')
			top--;
		else
		{
			v=0;
			return;
		}
	}
"]"	{
		if(a[top]=='[')
			top--;
		else
		{
			v=0;
			return;
		}
	}

"+"|"-"|"*"|"/"	{strcpy(opt[i++],yytext);}

[0-9]+|[a-zA-Z][a-zA-Z0-9_]*	{strcpy(opnd[j++],yytext);}
%%

int yywrap() {return 1;}

void main()
{
	printf("\nEnter an Expression: ");
	yylex();
	if(v && j>i)
	{
		printf("\nValid Expression\n");
		printf("\nOperators used are:-\n");
		for(int k=0;k<i;k++)
			printf("%s\n",opt[k]);
		printf("\nOperands used are:-\n");
		for(int k=0;k<j;k++)
			printf("%s\n",opnd[k]);

	}
	else
		printf("\nNot a Valid Expression!\n");
}

OR

%{
#include<stdio.h>
int a=0,s=0,m=0,d=0,ob=0,cb=0;
int flaga=0, flags=0, flagm=0, flagd=0;
%}
id [a-zA-Z]+
%%
{id} {printf("\n %s is an identifier\n",yytext);}
[+] {a++;flaga=1;}
[-] {s++;flags=1;}
[*] {m++;flagm=1;}
[/] {d++;flagd=1;}
[(] {ob++;}
[)] {cb++;}
%%

int yywrap(){return 1;}

int main()
{
printf("Enter the expression\n");
yylex();
if(ob-cb==0)
{
printf("Valid expression\n");
}
else
{
printf("Invalid expression");
}
printf("\nAdd=%d\nSub=%d\nMul=%d\nDiv=%d\n",a,s,m,d);
printf("Operators are: \n");
if(flaga)
printf("+\n");
if(flags)
printf("-\n");
if(flagm)
printf("*\n");
if(flagd)
printf("/\n");
return 0;
}


4.l

%{
int vc=0,cc=0,lc=0,sc=0;
%}

%%
[ \t]	{;}
[aeiouAEIOU] {vc++;}
[a-zA-Z] {cc++;}
\n lc++;
. sc++;
%%


int yywrap(){return 1;}
main()
{
yyin=fopen("input.txt","r");
yylex();
printf("The number of vowels are:  %d\n",vc);
printf("The number of consonants are:  %d\n",cc);
printf("The number lines are:  %d\n",lc);
printf("The number special characters are:  %d\n",sc);
return 0;
} 



5.l

%{
#include<stdio.h>
int pnum=0;
int nnum=0;
int pf=0;
int nf=0;
%}

%%
[-][0-9]+ 	{nnum++;}
[+]?[0-9]+	{pnum++;}	
[-][0-9]*\.[0-9]+	 {nf++;}
[+]?[0-9]*\.[0-9]+ 	{pf++;}
. ;    
%%

int yywrap(){return 1;}
main()
{
yyin=fopen("inp5.txt","r");
yylex();
printf("The +ve number are:  %d\n",pnum);
printf("The -ve number are:  %d\n",nnum);
printf("\nNo. of Positive fractions: %d",pf);
printf("\nNo. of Negative fractions: %d\n",nf);
return 0;
} 







YACC

1.l

%{
#include "y.tab.h"
%}

%%
[0-9]+	{return number;}
[a-zA-Z][a-zA-Z0-9_]*	{return id;}
\n	{return nl;}
.	{return yytext[0];}
%%
int yywrap(void){return 1;}


1.y

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token number id nl
%left '+' '-'
%left '*' '/'

%%
stmt:exp nl {printf("Valid exp\n");exit(0);}
;
exp:exp '+' exp
|exp '-' exp
|exp '*' exp
|exp '/' exp
|'('exp')'
|id
|number
;
%%

int yyerror(char *msg)
{
printf("Invalid\n");
exit(0);
}

main()
{
printf("Enter the exp\n");
yyparse();
}



2.l

%{
#include "y.tab.h"
%}

%%
[a-zA-Z]	{return letter;}
[0-9]	{return digit;}
[\n]	{return nl;}
[_]	{return unscore;}
.	{return yytext[0];}
%%

int yywrap(void){return 1;}

2.y

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token digit letter nl unscore
%%
stmt:variable nl	{printf("valid identifier\n");exit(0);}
;
variable:letter alphanumeric
;
alphanumeric:letter alphanumeric
|digit alphanumeric
|unscore alphanumeric
|letter 
|digit
|unscore
;
%%
int yyerror(char * msg)
{
printf("Invalid\n");
exit(0);
}

main()
{
printf("enter variable name\n");
yyparse();
}


3.l

%{
#include<stdio.h>
#include"y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext);return NUM;}
.	{return yytext[0];}
\n 	{return nl;}
%%
int yywrap() {return 1;}


3.y

%{
#include<stdio.h>
%}
%token NUM nl
%left '+' '-'
%left '*' '/'
%%
expr:e nl {printf("\nReslult: %d\n",$$); return;}
e: e'+'e {$$=$1+$3;}|
	e'-'e {$$=$1-$3;}|
	e'*'e {$$=$1*$3;}|
	e'/'e {$$=$1/$3;}|
	'('e')' {$$=$2;}|
	NUM {$$=$1;};
%%


void main()
{
	printf("\nEnter an Arithmetic Expression: ");
	yyparse();
}
void yyerror()
{
	printf("\nInvalid Expression\n");
}

